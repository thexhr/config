# -*- shell-script -*-

# Modelled after the great IPredator article:
# https://blog.ipredator.se/linux-firewall-howto.html

@hook pre "/sbin/modprobe nfnetlink_log";

# Network interfaces
@def $DEV_LAN = eth0;
@def $DEV_WLAN = wlan0;
@def $DEV_VBOX = vbnoxnet+;
@def $DEV_VPN = tun+;

# Common application ports.
@def $PORT_DNS = 53;
@def $PORT_IRC = ( 6668 6697 );
@def $PORT_NTP = 123;
@def $PORT_SSH = ( 22 2222 46368 );
@def $PORT_WEB = ( 80 443 8080 );
@def $PORT_MAIL = ( 465 993 );

# The ports we allow OpenVPN to connect to.
@def $PORT_OPENVPN = ( 1194 1195 );

# DNS IPs
@def $IP_DNS_PUBLIC = 0.0.0.0;
@def $IP_DNS_VPN = ( 10.23.0.1 46.246.46.246 194.132.32.32 );

@def $IP_SHIZZLE_WLAN = 1.1.1.1;

table filter {
	chain INPUT {
		# The default policy for the chain. Usually ACCEPT or DROP or REJECT.
		policy DROP;

		# Connection tracking
		mod state state INVALID DROP;
		mod state state (ESTABLISHED RELATED) ACCEPT;

		# Allow local traffic to loopback interface
		interface lo ACCEPT;

		# Allow local traffic to VirtualBox interface
		interface $DEV_VBOX ACCEPT;

		# Respond to ping ... makes debugging easier.
		proto icmp icmp-type echo-request ACCEPT;

		# Allow shitty hotel Wlan
		saddr $IP_SHIZZLE_WLAN proto tcp ACCEPT;

		# Log dropped packets.
		NFLOG nflog-group 1;
		DROP;
	}

	chain OUTPUT {
		policy DROP;

		# Connection tracking
		mod state state INVALID DROP;
		mod state state (ESTABLISHED RELATED) ACCEPT;

		# Allow local traffic from the loopback interface.
		outerface lo ACCEPT;

		# Allow local traffic from the VirtualBox interface
		outerface $DEV_VBOX ACCEPT;

		# Allow shitty hotel Wlan
		daddr $IP_SHIZZLE_WLAN proto tcp ACCEPT;

		# Respond to ping
		proto icmp icmp-type echo-request ACCEPT;

		# Allowed services on the WLAN interface.
		outerface $DEV_WLAN {
			proto (tcp udp) dport $PORT_DNS ACCEPT;
			proto udp dport $PORT_NTP ACCEPT;
			proto (tcp udp) dport $PORT_OPENVPN ACCEPT;
			proto tcp dport $PORT_SSH ACCEPT;
		}

		# Allowed services on the LAN interface.
		outerface $DEV_LAN {
			proto (tcp udp) dport $PORT_DNS ACCEPT;
			proto udp dport $PORT_NTP ACCEPT;
			proto (tcp udp) dport $PORT_OPENVPN ACCEPT;
			proto tcp dport $PORT_SSH ACCEPT;
		}

		# Default allowed outbound services on the VPN interface.
		# If you need more simply add your rules here.
		outerface $DEV_VPN {
			proto (tcp udp) daddr ( $IP_DNS_PUBLIC $IP_DNS_VPN ) dport $PORT_DNS ACCEPT;
			proto udp dport $PORT_NTP ACCEPT;
			proto tcp dport $PORT_SSH ACCEPT;
			proto tcp dport $PORT_WEB ACCEPT;
			proto tcp dport $PORT_MAIL ACCEPT;
		}

		# Log dropped packets.
		NFLOG nflog-group 1;
		DROP;
	}

	# this is not a router
	chain FORWARD policy DROP;
}

domain ip6 {
	table filter {
		chain INPUT {
			# The default policy for the chain. Usually ACCEPT or DROP or REJECT.
			policy DROP;

			# Connection tracking
			mod state state INVALID DROP;
			mod state state (ESTABLISHED RELATED) ACCEPT;

			# Allow local traffic to loopback interface
			interface lo ACCEPT;

			# Allow local traffic to VirtualBox interface
			interface $DEV_VBOX ACCEPT;

			# Allow link-local addresses
			saddr fe80::/10 ACCEPT;

			# Allow multicast
			daddr ff00::/8 ACCEPT;

			# Allow ICMPv6 in total
			proto icmpv6 ACCEPT;

			# Log dropped packets.
			NFLOG nflog-group 1;
			DROP;
		}

		chain OUTPUT {
			policy DROP;

			# Connection tracking
			mod state state INVALID DROP;
			mod state state (ESTABLISHED RELATED) ACCEPT;

			# Allow local traffic from the loopback interface.
			outerface lo ACCEPT;

			# Allow local traffic from the VirtualBox interface
			outerface $DEV_VBOX ACCEPT;

			# Allow Link-Local addresses
			saddr fe80::/10 ACCEPT;

			# Allow multicast
			daddr ff00::/8 ACCEPT;

			# Allow ICMPv6 in total
			proto icmpv6 ACCEPT;

			# Allowed services on the WLAN interface.
			outerface $DEV_WLAN {
				proto (tcp udp) dport $PORT_DNS ACCEPT;
				proto udp dport $PORT_NTP ACCEPT;
				proto (tcp udp) dport $PORT_OPENVPN ACCEPT;
				proto tcp dport $PORT_SSH ACCEPT;
			}

			# Allowed services on the LAN interface.
			outerface $DEV_LAN {
				proto (tcp udp) dport $PORT_DNS ACCEPT;
				proto udp dport $PORT_NTP ACCEPT;
				proto (tcp udp) dport $PORT_OPENVPN ACCEPT;
				proto tcp dport $PORT_SSH ACCEPT;
			}

			# Default allowed outbound services on the VPN interface.
			# If you need more simply add your rules here.
			outerface $DEV_VPN {
				#proto (tcp udp) daddr ( $IP_DNS_PUBLIC $IP_DNS_VPN ) dport $PORT_DNS ACCEPT;
				proto (tcp udp) dport $PORT_DNS ACCEPT;
				proto udp dport $PORT_NTP ACCEPT;
				proto tcp dport $PORT_SSH ACCEPT;
				proto tcp dport $PORT_WEB ACCEPT;
				proto tcp dport $PORT_MAIL ACCEPT;
			}

			# Log dropped packets.
			NFLOG nflog-group 1;
			REJECT reject-with icmp6-port-unreachable;
		}

		# this is not a router
		chain FORWARD policy DROP;
	}
}

