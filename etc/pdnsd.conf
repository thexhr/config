# Shamelessly stolen from http://wiki.kairaven.de/open/zensurfilter/azensur_dns

global {
	# Size of the disc cache
    perm_cache = 4096;
	# Location on disc
    cache_dir = "/var/cache/pdnsd";
	# Local pdnsd server port
    server_port = 53;
	# pdnsd server IP
    server_ip = 127.0.0.1;
	# Get cached entries even if net is down
    linkdown_kluge = off;
	# Max TTL for cache entries
    max_ttl = 7d;
	# Minimal TTL for cache entries
    min_ttl = 2h;
	# Run as the followin user
    run_as = pdnsd;
	# Run all threads with the privilege of the above user
    strict_setuid = yes;
	# Reject additional DNS records to prevent cache poisioning
    paranoid = on;
	# Allow using the status command
    status_ctl = on;
	# Verbosity level (from 0-3)
    verbosity = 1;
    query_method = udp_tcp;
    run_ipv4 = on;
	# Disable debugging
    debug = off;
	# Max number of simultaneously active threads
    proc_limit = 30;
	# Max queue length if proc_limit is reached
    procq_limit = 30;
    tcp_qtimeout = 30s;
	# Max numbers of remote server queired simultaneously
    par_queries = 1;
	# Global timeout parameter for dns queries
    timeout = 60s;
    randomize_recs = on;
    query_port_start = 1025;
    query_port_end = 65535;
    use_nss = on;
}

server {
    label = IPredator;
    ip = 194.132.32.32, 46.246.46.246,2001:67C:1350:DEAD:BEEF::246,2C0F:F930:DEAD:BEEF::32;
	# Give all servers above an equal chance to be queried
    randomize_servers = on;
	# Remote server port
    port = 53;
	# Up test w/ empty DNS query
    uptest = ping;
	# Uptest after a query times out
    interval = ontimeout;
	# DNS query timeout
    timeout = 15s;
	# Do not purge the cache after a timeout
    purge_cache = off;
	# Enable caching
    caching = on;
	# Only cache the queried info, no additional staff
    lean_query = on;
	# Assume a DNS server is on, even before the first uptest
    preset = on;
	# Accept server answers and do not connect other servers
    proxy_only = on;
    # Reject replies containing the following IPs
	reject = 0.0.0.0/8,169.254.0.0/16,127.0.0.0/8,192.254.0.0/16,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12;
	# Fail if reply matches an IP listed above
    reject_policy = fail;
	# Check reject list for all server replies
    reject_recursively = on;
	# Exclude from queries
    exclude = .postbank.de;
    policy = included;
}

server {
    label = isp;
    ip = 172.23.5.1;
    port = 53;
    uptest = query;
    interval = ontimeout;
    timeout = 15s;
    purge_cache = off;
    caching = on;
    lean_query = on;
    preset = on;
    proxy_only = on;
    reject = 0.0.0.0/8,169.254.0.0/16,127.0.0.0/8,192.254.0.0/16,192.168.0.0/16,10.0.0.0/8,172.16.0.0/12;
    reject_policy = fail;
    reject_recursively = on;
    include = .postbank.de;
    policy = excluded;
}

server {
    label = "resolvconf";
    proxy_only = on;
}

# Every source section allows you to let pdnsd read the records from a file
# in an /etc/hosts-like format. pdnsd will generate records to resolve the
# entries address from its host name and vice versa for every entry in the file

source {
    owner = localhost;
    file = "/etc/hosts";
}

# Every rr section specifies a dns resource record that is stored locally
rr {
    name = localhost;
    reverse = on;
    a = 127.0.0.1;
    owner = localhost;
    soa = localhost,root.localhost,42,86400,900,86400,86400;
}
